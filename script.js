// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞)
const components = {
    cpus: [
        { id: 1, name: 'Intel Core i5-12400F', type: 'cpu', socket: 'LGA1700', price: 15000, cores: 6, threads: 12 },
        { id: 2, name: 'AMD Ryzen 5 5600X', type: 'cpu', socket: 'AM4', price: 16000, cores: 6, threads: 12 },
        { id: 3, name: 'Intel Core i7-13700K', type: 'cpu', socket: 'LGA1700', price: 30000, cores: 16, threads: 24 },
        { id: 4, name: 'AMD Ryzen 7 7800X3D', type: 'cpu', socket: 'AM5', price: 35000, cores: 8, threads: 16 }
    ],
    motherboards: [
        { id: 1, name: 'ASUS PRIME B660-PLUS', type: 'motherboard', socket: 'LGA1700', price: 12000, ramType: 'DDR4' },
        { id: 2, name: 'MSI B550 TOMAHAWK', type: 'motherboard', socket: 'AM4', price: 13000, ramType: 'DDR4' },
        { id: 3, name: 'Gigabyte Z790 AORUS', type: 'motherboard', socket: 'LGA1700', price: 25000, ramType: 'DDR5' },
        { id: 4, name: 'ASUS ROG STRIX B650-E', type: 'motherboard', socket: 'AM5', price: 22000, ramType: 'DDR5' }
    ],
    gpus: [
        { id: 1, name: 'NVIDIA RTX 4060 8GB', type: 'gpu', price: 35000, vram: 8, power: 115 },
        { id: 2, name: 'AMD RX 7600 8GB', type: 'gpu', price: 30000, vram: 8, power: 165 },
        { id: 3, name: 'NVIDIA RTX 4070 12GB', type: 'gpu', price: 60000, vram: 12, power: 200 },
        { id: 4, name: 'AMD RX 7800 XT 16GB', type: 'gpu', price: 55000, vram: 16, power: 263 }
    ],
    ram: [
        { id: 1, name: 'Corsair Vengeance 16GB DDR4', type: 'ram', speed: '3200MHz', price: 4000, capacity: 16 },
        { id: 2, name: 'Kingston Fury 32GB DDR4', type: 'ram', speed: '3200MHz', price: 7000, capacity: 32 },
        { id: 3, name: 'G.Skill Trident Z 32GB DDR5', type: 'ram', speed: '6000MHz', price: 12000, capacity: 32 }
    ],
    storage: [
        { id: 1, name: 'Samsung 980 1TB NVMe', type: 'storage', price: 6000, capacity: 1000, type: 'NVMe' },
        { id: 2, name: 'WD Blue SN570 2TB NVMe', type: 'storage', price: 10000, capacity: 2000, type: 'NVMe' },
        { id: 3, name: 'Crucial MX500 1TB SATA', type: 'storage', price: 5000, capacity: 1000, type: 'SATA' }
    ],
    psus: [
        { id: 1, name: 'Seasonic Focus 650W', type: 'psu', wattage: 650, price: 7000, efficiency: '80+ Gold' },
        { id: 2, name: 'Corsair RM750e 750W', type: 'psu', wattage: 750, price: 9000, efficiency: '80+ Gold' },
        { id: 3, name: 'be quiet! Straight Power 850W', type: 'psu', wattage: 850, price: 12000, efficiency: '80+ Platinum' }
    ]
};

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è AI (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API)
const PC_KNOWLEDGE_BASE = {
    compatibility: {
        'LGA1700': ['Intel Core i5-12400F', 'Intel Core i7-13700K'],
        'AM4': ['AMD Ryzen 5 5600X'], 
        'AM5': ['AMD Ryzen 7 7800X3D'],
        'DDR4': ['ASUS PRIME B660-PLUS', 'MSI B550 TOMAHAWK'],
        'DDR5': ['Gigabyte Z790 AORUS', 'ASUS ROG STRIX B650-E']
    },
    recommendations: {
        gaming: {
            budget: 'Intel i5-12400F + RTX 4060 + 16GB DDR4',
            midrange: 'AMD Ryzen 5 5600X + RTX 4070 + 32GB DDR4', 
            highEnd: 'AMD Ryzen 7 7800X3D + RTX 4070 + 32GB DDR5'
        },
        work: {
            programming: '–ú–Ω–æ–≥–æ—è–¥–µ—Ä–Ω—ã–π CPU + 32GB RAM + –±—ã—Å—Ç—Ä—ã–π SSD',
            videoEditing: '–ú–Ω–æ–≥–æ—è–¥–µ—Ä–Ω—ã–π CPU + 64GB RAM + –º–æ—â–Ω–∞—è GPU',
            design: '–•–æ—Ä–æ—à–∞—è GPU + —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞'
        }
    },
    commonIssues: {
        'socket_mismatch': '‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ–∫–µ—Ç–æ–≤! –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å–æ–∫–µ—Ç',
        'insufficient_psu': '‚ö†Ô∏è –°–ª–∞–±—ã–π –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–∞—Å 20-30% –æ—Ç –æ–±—â–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è',
        'ram_mismatch': '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø –ø–∞–º—è—Ç–∏ (DDR4/DDR5) –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã'
    }
};

// –¢–µ–∫—É—â–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let currentBuild = {
    cpu: null,
    motherboard: null, 
    gpu: null,
    ram: null,
    storage: null,
    psu: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeComponents();
    createPCSlots();
    updateBuildSummary();
    showWelcomeMessage();
});

function showWelcomeMessage() {
    addAIMessage(`üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–±–æ—Ä–∫–µ –ü–ö!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –º–µ—á—Ç—ã! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üîß **–°–±–æ—Ä–∫–∞ –ü–ö:**
‚Ä¢ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∫–æ—Ä–ø—É—Å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
‚Ä¢ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è

ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫:**
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–∏
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∂–µ–ª–µ–∑–µ

üí° **–ù–∞—á–Ω–∏—Ç–µ —Å:**
1. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É
2. –ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ "–°–æ–±–µ—Ä–∏ –ü–ö –¥–ª—è –∏–≥—Ä –∑–∞ 80000 —Ä—É–±–ª–µ–π"
3. –ò–ª–∏ "–ö–∞–∫–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –ª—É—á—à–µ –¥–ª—è 4K?"

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üöÄ`, 'ai');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function initializeComponents() {
    for (const category in components) {
        const container = document.getElementById(category);
        if (container) {
            components[category].forEach(component => {
                const element = document.createElement('div');
                element.className = 'component-item';
                element.textContent = `${component.name} - ${component.price}‚ÇΩ`;
                element.draggable = true;
                element.setAttribute('data-component', JSON.stringify(component));
                element.addEventListener('dragstart', handleDragStart);
                container.appendChild(element);
            });
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –≤ –∫–æ—Ä–ø—É—Å–µ –ü–ö
function createPCSlots() {
    const pcCase = document.getElementById('pcCase');
    const slots = [
        { id: 'cpu', name: 'üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', width: '30%', height: '15%', top: '10%', left: '35%' },
        { id: 'motherboard', name: 'üîå –ú–∞—Ç.–ø–ª–∞—Ç–∞', width: '80%', height: '40%', top: '30%', left: '10%' },
        { id: 'gpu', name: 'üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', width: '25%', height: '15%', top: '45%', left: '65%' },
        { id: 'ram', name: 'üíæ –ü–∞–º—è—Ç—å', width: '20%', height: '10%', top: '35%', left: '15%' },
        { id: 'storage', name: 'üíΩ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å', width: '25%', height: '10%', top: '75%', left: '10%' },
        { id: 'psu', name: '‚ö° –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', width: '25%', height: '15%', top: '75%', left: '65%' }
    ];

    slots.forEach(slot => {
        const slotElement = document.createElement('div');
        slotElement.className = 'component-slot';
        slotElement.id = `slot-${slot.id}`;
        slotElement.style.width = slot.width;
        slotElement.style.height = slot.height;
        slotElement.style.position = 'absolute';
        slotElement.style.top = slot.top;
        slotElement.style.left = slot.left;
        slotElement.textContent = slot.name;
        slotElement.setAttribute('data-slot', slot.id);
        
        slotElement.addEventListener('dragover', handleDragOver);
        slotElement.addEventListener('drop', handleDrop);
        slotElement.addEventListener('dragenter', handleDragEnter);
        slotElement.addEventListener('dragleave', handleDragLeave);
        
        pcCase.appendChild(slotElement);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag & Drop
function handleDragStart(e) {
    e.dataTransfer.setData('text/plain', e.target.getAttribute('data-component'));
}

function handleDragOver(e) {
    e.preventDefault();
}

function handleDragEnter(e) {
    e.preventDefault();
    e.target.style.background = '#4a6572';
    e.target.style.borderColor = '#3498db';
}

function handleDragLeave(e) {
    e.target.style.background = '#34495e';
    e.target.style.borderColor = '#7f8c8d';
}

function handleDrop(e) {
    e.preventDefault();
    const componentData = JSON.parse(e.dataTransfer.getData('text/plain'));
    const slotType = e.target.getAttribute('data-slot');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const compatibilityResult = checkCompatibility(componentData, slotType);
    
    if (compatibilityResult.compatible) {
        currentBuild[slotType] = componentData;
        e.target.classList.add('filled');
        e.target.innerHTML = `<strong>${componentData.name}</strong><br>${componentData.price}‚ÇΩ`;
        e.target.style.background = '#27ae60';
        e.target.style.borderColor = '#2ecc71';
        
        updateBuildSummary();
        addAIMessage(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${componentData.name}`, 'user');
        generateRecommendation();
    } else {
        e.target.style.background = '#e74c3c';
        e.target.style.borderColor = '#c0392b';
        setTimeout(() => {
            e.target.style.background = '#34495e';
            e.target.style.borderColor = '#7f8c8d';
        }, 1000);
        addAIMessage(`‚ùå ${compatibilityResult.reason}`, 'ai');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function checkCompatibility(component, slotType) {
    let result = { compatible: true, reason: '' };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã
    if (slotType === 'cpu' && currentBuild.motherboard) {
        if (component.socket !== currentBuild.motherboard.socket) {
            result.compatible = false;
            result.reason = `–°–æ–∫–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (${component.socket}) –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–æ–π (${currentBuild.motherboard.socket})`;
        }
    }
    
    if (slotType === 'motherboard' && currentBuild.cpu) {
        if (component.socket !== currentBuild.cpu.socket) {
            result.compatible = false;
            result.reason = `–°–æ–∫–µ—Ç –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã (${component.socket}) –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º (${currentBuild.cpu.socket})`;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –ë–ü
    if (slotType === 'psu') {
        const estimatedPower = calculatePowerConsumption();
        if (component.wattage < estimatedPower) {
            result.compatible = false;
            result.reason = `–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è ${component.wattage}W –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${estimatedPower + 100}W`;
        }
    }

    if (slotType === 'gpu' && currentBuild.psu) {
        const estimatedPower = calculatePowerConsumption();
        if (currentBuild.psu.wattage < estimatedPower) {
            result.compatible = false;
            result.reason = `–ë–ü ${currentBuild.psu.wattage}W —Å–ª–∞–± –¥–ª—è —ç—Ç–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è ${estimatedPower + 100}W`;
        }
    }

    return result;
}

// –†–∞—Å—á–µ—Ç —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
function calculatePowerConsumption() {
    let power = 0;
    if (currentBuild.cpu) power += currentBuild.cpu.cores * 15; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    if (currentBuild.gpu) power += currentBuild.gpu.power;
    if (currentBuild.motherboard) power += 50;
    if (currentBuild.ram) power += 10;
    if (currentBuild.storage) power += 5;
    
    return Math.ceil(power * 1.2); // +20% –∑–∞–ø–∞—Å
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–±–æ—Ä–∫–∏
function updateBuildSummary() {
    const summary = document.getElementById('buildSummary');
    let html = '<div class="build-details">';
    let totalPrice = 0;
    let hasComponents = false;
    
    for (const component in currentBuild) {
        if (currentBuild[component]) {
            hasComponents = true;
            html += `
                <div class="build-item">
                    <span class="component-name">${getComponentName(component)}:</span>
                    <span class="component-details">${currentBuild[component].name}</span>
                    <span class="component-price">${currentBuild[component].price}‚ÇΩ</span>
                </div>`;
            totalPrice += currentBuild[component].price;
        }
    }
    
    if (!hasComponents) {
        html = '<p>üéØ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∫–æ—Ä–ø—É—Å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É</p>';
    } else {
        const powerUsage = calculatePowerConsumption();
        html += `
            <div class="build-total">
                <strong>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}‚ÇΩ</strong>
                <div class="power-consumption">‚ö° –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: ${powerUsage}W</div>
                ${currentBuild.psu ? `<div class="power-status">${currentBuild.psu.wattage >= powerUsage ? '‚úÖ –ë–ü –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω' : '‚ö†Ô∏è –ë–ü –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∞–±'}</div>` : ''}
            </div>`;
    }
    
    html += '</div>';
    summary.innerHTML = html;
}

function getComponentName(type) {
    const names = {
        cpu: 'üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
        motherboard: 'üîå –ú–∞—Ç.–ø–ª–∞—Ç–∞', 
        gpu: 'üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞',
        ram: 'üíæ –ü–∞–º—è—Ç—å',
        storage: 'üíΩ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å',
        psu: '‚ö° –ë–ü'
    };
    return names[type] || type;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API)
function generateRecommendation() {
    const recommendations = [];
    const buildContext = createBuildContext();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫–µ—Ç–æ–≤
    if (currentBuild.cpu && currentBuild.motherboard) {
        if (currentBuild.cpu.socket === currentBuild.motherboard.socket) {
            recommendations.push('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –º–∞—Ç.–ø–ª–∞—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã');
        } else {
            recommendations.push('‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ–∫–µ—Ç–æ–≤!');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–ü
    if (currentBuild.psu) {
        const powerNeed = calculatePowerConsumption();
        if (currentBuild.psu.wattage >= powerNeed) {
            recommendations.push(`‚úÖ –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è ${currentBuild.psu.wattage}W –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω`);
        } else {
            recommendations.push(`‚ö†Ô∏è –ë–ü ${currentBuild.psu.wattage}W —Å–ª–∞–±–æ–≤–∞—Ç. –ù—É–∂–Ω–æ ~${powerNeed}W`);
        }
    }
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!currentBuild.cpu && !currentBuild.motherboard) {
        recommendations.push('üí° –ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã');
    } else if (currentBuild.cpu && currentBuild.motherboard && !currentBuild.gpu) {
        recommendations.push('üéÆ –î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä –∏ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π');
    } else if (currentBuild.gpu && !currentBuild.psu) {
        recommendations.push('‚ö° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –º–æ—â–Ω—ã–π –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã');
    }
    
    const recommendationText = recommendations.length > 0 ? 
        recommendations.join('\n') : '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–±–æ—Ä–∫—É!';
    
    document.getElementById('recommendations').innerHTML = 
        `<div class="message ai-message">${recommendationText}</div>`;
}

// –£–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API)
function getAIResponse(userMessage) {
    return new Promise((resolve) => {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI
        setTimeout(() => {
            const response = generateSmartResponse(userMessage);
            resolve(response);
        }, 1000 + Math.random() * 2000);
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ API
function generateSmartResponse(message) {
    const lowerMessage = message.toLowerCase();
    const buildContext = createBuildContext();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('hello') || lowerMessage.includes('start')) {
        return `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–±–æ—Ä–∫–µ –ü–ö. –í–∏–∂—É –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É: ${buildContext}

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ú–æ–∂–µ—Ç–µ:
‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–±—Ä–∞—Ç—å –ü–ö –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É`;
    }

    // –°–±–æ—Ä–∫–∞ –ø–æ–¥ –±—é–¥–∂–µ—Ç
    if (lowerMessage.includes('—Å–æ–±–µ—Ä') || lowerMessage.includes('–±—é–¥–∂–µ—Ç') || lowerMessage.includes('—Ä—É–±–ª')) {
        const budget = extractBudget(message);
        if (budget) {
            return generateBuildByBudget(budget);
        }
        return generateBuildByBudget(50000);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–≥—Ä–∞–º
    if (lowerMessage.includes('–∏–≥—Ä') || lowerMessage.includes('game')) {
        return generateGamingRecommendation();
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    if (lowerMessage.includes('—Ä–∞–±–æ—Ç') || lowerMessage.includes('–æ—Ñ–∏—Å') || lowerMessage.includes('—Ä–∞–±–æ—Ç–∞')) {
        return generateWorkRecommendation();
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–∏
    if (lowerMessage.includes('–∞–Ω–∞–ª–∏–∑') || lowerMessage.includes('–ø—Ä–æ–≤–µ—Ä') || lowerMessage.includes('—Å–æ–≤–º–µ—Å—Ç')) {
        return analyzeCurrentBuild();
    }

    // –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    if (lowerMessage.includes('–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä') || lowerMessage.includes('cpu')) {
        return `**–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã - —á—Ç–æ –≤–∞–∂–Ω–æ:**\n‚Ä¢ –î–ª—è –∏–≥—Ä: –≤—ã—Å–æ–∫–∞—è —Ç–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞\n‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç—ã: –º–Ω–æ–≥–æ —è–¥–µ—Ä\n‚Ä¢ –°–æ–∫–µ—Ç—ã: LGA1700 (Intel), AM4/AM5 (AMD)\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é: i5-12400F –¥–ª—è –±—é–¥–∂–µ—Ç–∞, Ryzen 7 7800X3D –¥–ª—è –∏–≥—Ä`;
    }

    if (lowerMessage.includes('–≤–∏–¥–µ–æ–∫–∞—Ä—Ç') || lowerMessage.includes('gpu')) {
        return `**–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã - —á—Ç–æ –≤–∞–∂–Ω–æ:**\n‚Ä¢ –î–ª—è 1080p: RTX 4060 / RX 7600\n‚Ä¢ –î–ª—è 1440p: RTX 4070 / RX 7800 XT\n‚Ä¢ –ü–∞–º—è—Ç—å: 8GB –º–∏–Ω–∏–º—É–º, 12GB+ –¥–ª—è 1440p\n‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è!`;
    }

    if (lowerMessage.includes('–ø–∞–º—è—Ç') || lowerMessage.includes('ram')) {
        return `**–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:**\n‚Ä¢ –ò–≥—Ä—ã: 16GB DDR4-3200 –º–∏–Ω–∏–º—É–º\n‚Ä¢ –°—Ç—Ä–∏–º–∏–Ω–≥/—Ä–∞–±–æ—Ç–∞: 32GB\n‚Ä¢ –¢–∏–ø: DDR4 (–±—é–¥–∂–µ—Ç), DDR5 (–±—É–¥—É—â–µ–µ)\n‚Ä¢ 2 –º–æ–¥—É–ª—è –ª—É—á—à–µ —á–µ–º 1 (dual-channel)`;
    }

    // –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
    if (lowerMessage.includes('—Å–æ–≤–µ—Ç') || lowerMessage.includes('tip')) {
        return `**–°–æ–≤–µ—Ç—ã –ø–æ —Å–±–æ—Ä–∫–µ:**\n\n1. **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å** - –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ–∫–µ—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã\n2. **–ë–ü** - –±–µ—Ä–∏—Ç–µ –Ω–∞ 20-30% –º–æ—â–Ω–µ–µ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ\n3. **–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ** - –Ω–µ —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –∫—É–ª–µ—Ä–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n4. **–ö–æ—Ä–ø—É—Å** - —Ö–æ—Ä–æ—à–∞—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è –≤–∞–∂–Ω–µ–µ –∫—Ä–∞—Å–æ—Ç—ã\n5. **SSD** - NVMe –¥–ª—è —Å–∏—Å—Ç–µ–º—ã, SATA –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è`;
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return `–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–∏: ${buildContext}

ü§ñ –Ø –ª–æ–∫–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫! –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ:

‚Ä¢ **–°–±–æ—Ä–∫–µ –ü–ö** - "–°–æ–±–µ—Ä–∏ –ü–ö –¥–ª—è –∏–≥—Ä –∑–∞ 80000"
‚Ä¢ **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö** - "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ª—É—á—à–µ?"  
‚Ä¢ **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏** - "–ü—Ä–æ–≤–µ—Ä—å –º–æ—é —Å–±–æ—Ä–∫—É"
‚Ä¢ **–ë—é–¥–∂–µ—Ç–µ** - "–í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞ 50000 —Ä—É–±–ª–µ–π"

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - —è –±—É–¥—É –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!`;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
function extractBudget(message) {
    const budgetMatch = message.match(/(\d+)\s*(—Ç—ã—Å|–∫|—Ä—É–±)/) || message.match(/\b(\d{4,5})\b/);
    if (budgetMatch) {
        let budget = parseInt(budgetMatch[1]);
        if (budgetMatch[2] === '—Ç—ã—Å' || budget < 1000) budget *= 1000;
        return budget;
    }
    return null;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏ –ø–æ –±—é–¥–∂–µ—Ç—É
function generateBuildByBudget(budget) {
    let builds = {
        50000: {
            name: "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π",
            components: [
                "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel i3-12100F (8,000‚ÇΩ)",
                "–ú–∞—Ç.–ø–ª–∞—Ç–∞: B660 DDR4 (9,000‚ÇΩ)", 
                "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RX 6600 (25,000‚ÇΩ)",
                "–ü–∞–º—è—Ç—å: 16GB DDR4 (4,000‚ÇΩ)",
                "SSD: 1TB NVMe (5,000‚ÇΩ)",
                "–ë–ü: 550W (5,000‚ÇΩ)",
                "–ò—Ç–æ–≥–æ: ~56,000‚ÇΩ"
            ]
        },
        80000: {
            name: "–°—Ä–µ–¥–Ω–∏–π –∏–≥—Ä–æ–≤–æ–π", 
            components: [
                "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 5 5600X (16,000‚ÇΩ)",
                "–ú–∞—Ç.–ø–ª–∞—Ç–∞: B550 (13,000‚ÇΩ)",
                "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4060 (35,000‚ÇΩ)",
                "–ü–∞–º—è—Ç—å: 32GB DDR4 (7,000‚ÇΩ)", 
                "SSD: 1TB NVMe (6,000‚ÇΩ)",
                "–ë–ü: 650W (7,000‚ÇΩ)",
                "–ò—Ç–æ–≥–æ: ~84,000‚ÇΩ"
            ]
        },
        120000: {
            name: "–ú–æ—â–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π",
            components: [
                "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7 7800X3D (35,000‚ÇΩ)",
                "–ú–∞—Ç.–ø–ª–∞—Ç–∞: B650 (22,000‚ÇΩ)", 
                "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4070 (60,000‚ÇΩ)",
                "–ü–∞–º—è—Ç—å: 32GB DDR5 (12,000‚ÇΩ)",
                "SSD: 2TB NVMe (10,000‚ÇΩ)",
                "–ë–ü: 750W (9,000‚ÇΩ)",
                "–ò—Ç–æ–≥–æ: ~148,000‚ÇΩ"
            ]
        }
    };

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –±—é–¥–∂–µ—Ç
    const budgets = Object.keys(builds).map(Number).sort((a,b) => a-b);
    const targetBudget = budgets.find(b => b >= budget) || budgets[budgets.length-1];
    const build = builds[targetBudget];

    return `üí° **${build.name} –∑–∞ ~${targetBudget}‚ÇΩ:**\n\n${build.components.join('\n')}\n\nüí¨ *–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å–±–æ—Ä–∫–∞. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏!*`;
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä
function generateGamingRecommendation() {
    return `üéÆ **–ò–≥—Ä–æ–≤–æ–π –ü–ö - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**

**–ë—é–¥–∂–µ—Ç –¥–æ 60,000‚ÇΩ:**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel i3-12100F / AMD Ryzen 5 5600
‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RX 6600 / RTX 3060
‚Ä¢ –ü–∞–º—è—Ç—å: 16GB DDR4
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: 1080p @ 60fps –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –∏–≥—Ä

**–°—Ä–µ–¥–Ω–∏–π –¥–æ 100,000‚ÇΩ:**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 5 7600X / Intel i5-13400F  
‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4060 Ti / RX 7700 XT
‚Ä¢ –ü–∞–º—è—Ç—å: 32GB DDR5
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: 1440p @ 100fps

**–í—ã—Å–æ–∫–∏–π –æ—Ç 150,000‚ÇΩ:**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7 7800X3D
‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4070 Ti / RX 7900 XT
‚Ä¢ –ü–∞–º—è—Ç—å: 32GB DDR5
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: 4K @ 60fps / 1440p @ 144fps

üí° **–°–æ–≤–µ—Ç:** –í –∏–≥—Ä–∞—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç!`;
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
function generateWorkRecommendation() {
    return `üíº **–†–∞–±–æ—á–∏–π –ü–ö - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**

**–û—Ñ–∏—Å–Ω—ã–π (–¥–æ 40,000‚ÇΩ):**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel i3 / AMD Ryzen 3 —Å iGPU
‚Ä¢ –ü–∞–º—è—Ç—å: 16GB DDR4
‚Ä¢ SSD: 512GB NVMe
‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è

**–î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ 80,000‚ÇΩ):**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7 / Intel i7 (8+ —è–¥–µ—Ä)
‚Ä¢ –ü–∞–º—è—Ç—å: 32GB DDR4/DDR5  
‚Ä¢ SSD: 1TB NVMe + 2TB HDD
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä: 27" 1440p

**–î–ª—è –º–æ–Ω—Ç–∞–∂–∞ –≤–∏–¥–µ–æ (–æ—Ç 120,000‚ÇΩ):**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 9 / Intel i9 (12+ —è–¥–µ—Ä)
‚Ä¢ –ü–∞–º—è—Ç—å: 64GB+ DDR5
‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4070+ —Å 12GB+ –ø–∞–º—è—Ç–∏
‚Ä¢ SSD: 2TB NVMe –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤

üí° **–°–æ–≤–µ—Ç:** –î–ª—è —Ä–∞–±–æ—Ç—ã –≤–∞–∂–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏!`;
}

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–∏
function analyzeCurrentBuild() {
    const issues = [];
    const warnings = [];
    const good = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫–µ—Ç–æ–≤
    if (currentBuild.cpu && currentBuild.motherboard) {
        if (currentBuild.cpu.socket === currentBuild.motherboard.socket) {
            good.push(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –º–∞—Ç.–ø–ª–∞—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã (${currentBuild.cpu.socket})`);
        } else {
            issues.push(`‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ–∫–µ—Ç–æ–≤: ${currentBuild.cpu.socket} ‚â† ${currentBuild.motherboard.socket}`);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–ü
    if (currentBuild.psu) {
        const powerNeed = calculatePowerConsumption();
        if (currentBuild.psu.wattage >= powerNeed) {
            good.push(`‚úÖ –ë–ü ${currentBuild.psu.wattage}W –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω (–Ω—É–∂–Ω–æ ~${powerNeed}W)`);
        } else {
            warnings.push(`‚ö†Ô∏è –ë–ü ${currentBuild.psu.wattage}W —Å–ª–∞–±–æ–≤–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${powerNeed + 100}W`);
        }
    }
    
    // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    const componentCount = Object.values(currentBuild).filter(Boolean).length;
    if (componentCount < 3) {
        warnings.push('üîß –°–±–æ—Ä–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    }
    
    let response = `üîç **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–∏:**\n\n`;
    
    if (issues.length > 0) {
        response += `**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n${issues.join('\n')}\n\n`;
    }
    
    if (warnings.length > 0) {
        response += `**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n${warnings.join('\n')}\n\n`;
    }
    
    if (good.length > 0) {
        response += `**–í—Å–µ —Ö–æ—Ä–æ—à–æ:**\n${good.join('\n')}\n\n`;
    }
    
    if (issues.length === 0 && warnings.length === 0 && good.length === 0) {
        response += `üìù –°–±–æ—Ä–∫–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã!\n\n`;
    }
    
    response += `üí° *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–±–æ—Ä–∫—É - —è –±—É–¥—É –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å!*`;
    
    return response;
}

function createBuildContext() {
    let context = '';
    let componentCount = 0;
    
    for (const component in currentBuild) {
        if (currentBuild[component]) {
            componentCount++;
            context += `${getComponentName(component)}: ${currentBuild[component].name}. `;
        }
    }
    
    if (componentCount === 0) return '–ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤';
    return context;
}

// –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–æ–º
async function sendMessage() {
    const input = document.getElementById('userInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    addAIMessage(message, 'user');
    input.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingId = showLoadingIndicator();
    
    try {
        const response = await getAIResponse(message);
        removeLoadingIndicator(loadingId);
        addAIMessage(response, 'ai');
    } catch (error) {
        removeLoadingIndicator(loadingId);
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        const fallbackResponse = `–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–∏: ${createBuildContext()}

ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Å–±–æ—Ä–∫–µ –ü–ö, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–°–æ–±–µ—Ä–∏ –∏–≥—Ä–æ–≤–æ–π –ü–ö –∑–∞ 70000" –∏–ª–∏ "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ª—É—á—à–µ?"`;
        addAIMessage(fallbackResponse, 'ai');
    }
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator() {
    const chatMessages = document.getElementById('chatMessages');
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'message ai-message loading';
    loadingDiv.id = 'loading-' + Date.now();
    loadingDiv.textContent = 'ü§î –î—É–º–∞—é...';
    chatMessages.appendChild(loadingDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    return loadingDiv.id;
}

function removeLoadingIndicator(id) {
    const element = document.getElementById(id);
    if (element) element.remove();
}

function addAIMessage(text, sender) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    messageDiv.innerHTML = text.replace(/\n/g, '<br>');
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// –ê–Ω–∞–ª–∏–∑ —Å–±–æ—Ä–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
async function analyzeBuild() {
    const buildContext = createBuildContext();
    
    if (buildContext === '–ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤') {
        addAIMessage('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Å–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'ai');
        return;
    }
    
    addAIMessage('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–±–æ—Ä–∫—É...', 'user');
    
    try {
        const response = analyzeCurrentBuild();
        addAIMessage(response, 'ai');
    } catch (error) {
        addAIMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–±–æ—Ä–∫–∏', 'ai');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.getElementById('userInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const additionalCSS = `
.build-details {
    font-size: 14px;
}
.build-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 8px;
    background: #f8f9fa;
    border-radius: 8px;
    align-items: center;
}
.component-name {
    font-weight: bold;
    width: 120px;
    color: #2c3e50;
}
.component-details {
    flex: 1;
    text-align: left;
    padding: 0 10px;
}
.component-price {
    font-weight: bold;
    color: #27ae60;
    min-width: 80px;
    text-align: right;
}
.build-total {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 2px solid #bdc3c7;
    background: #ecf0f1;
    padding: 15px;
    border-radius: 8px;
}
.power-consumption {
    font-size: 12px;
    color: #7f8c8d;
    margin-top: 5px;
}
.power-status {
    font-size: 12px;
    margin-top: 5px;
    font-weight: bold;
}
.message.loading {
    background: #95a5a6 !important;
    font-style: italic;
}
.ai-message {
    white-space: pre-line;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
const styleSheet = document.createElement('style');
styleSheet.textContent = additionalCSS;
document.head.appendChild(styleSheet);